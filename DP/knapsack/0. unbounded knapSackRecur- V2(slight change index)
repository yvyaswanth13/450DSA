
public class Solution {

    static int knapSackRecur(int i, int capacity, int[] val, int[] wt) {
        //if (i == val.length) return 0;
      if (i == 0) return 0;

        // Consider current item only if 
        // its weight is less than equal 
        // to maximum weight.
        int take = 0;
        if (wt[i-1] <= capacity) {
            take = val[i-1] + knapSackRecur(i, capacity - wt[i-1], val, wt);
        }

        // Skip the current item
        int noTake = knapSackRecur(i - 1, capacity, val, wt);

        // Return maximum of the two.
        return Math.max(take, noTake);
    }

    static int knapSack(int capacity, int[] val, int[] wt) {
        return knapSackRecur(wt.length, capacity, val, wt);
    }
    public static void main(String[] args) {
              int[] val = {1, 1};
        int[] wt = {2, 1};
        int capacity = 3;
        System.out.println(knapSack(capacity, val, wt));   
    }
}
