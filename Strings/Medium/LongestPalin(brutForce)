// Java program to find the longest
// palindromic substring.

import java.util.*;

class GfG {

    // Function to check if a substring 
    // s[low..high] is a palindrome
    static boolean checkPal(String str, int low, int high) {
        while (low < high) {
            if (str.charAt(low) != str.charAt(high))
                return false;
            low++;
            high--;
        }
        return true;
    }

    // Function to find the longest palindrome substring
    static String longestPalindrome(String str) {

        // Get length of input string
        int n = str.length();

        // All substrings of length 1 are palindromes
        int maxLen = 1, start = 0;

        // Nested loop to mark start and end index
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {

                // Check if the current substring is 
                // a palindrome
                if (checkPal(str, i, j) && (j - i + 1) > maxLen) {
                    start = i;
                    maxLen = j - i + 1;
                }
            }
        }

        return str.substring(start, start + maxLen);
    }

    public static void main(String[] args) {
        String str = "forgeeksskeegfor";
        System.out.println(longestPalindrome(str));
    }
}
